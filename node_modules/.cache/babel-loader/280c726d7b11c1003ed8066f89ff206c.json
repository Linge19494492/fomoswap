{"ast":null,"code":"import conf from './conf';\nimport EventEmitter from 'eventemitter3';\n\nclass Wallet {\n  constructor() {\n    // tronWeb 对象\n    this.tronWrap = window.tronWeb; // 事件名字常量\n\n    this.eventConstant = {\n      wallet_connection: \"wallet_connection\" // 钱包连接\n      // cornPool_balance_update:   conf['pool']['cornPoolAddress'],\n      // pearlPool_balance_update:  conf['pool']['pearlPoolAddress'],\n      // taiPool_balance_update:    conf['pool']['taiPoolAddress'],\n      // usdtPool_balance_update:   conf['pool']['usdtPoolAddress'],\n      // tigerPool_balance_update:  conf['pool']['tigerPoolAddress'],\n      // tigercPool_balance_update: conf['pool']['tigercPoolAddress'],\n\n    }; // 数据，在这里获取，使用事件更新 bigNumber , 比较大小使用 comparedTo\n    // this.store = {\n    //     [conf['pool']['cornPoolAddress']]: {\n    //         pawnNum:      0, // 抵押数量\n    //         totalPawnNum: 0, // 总抵押数量\n    //         rewardNum:    0, // 已获得奖金数\n    //         lpTokenNum:   0 // lp token 余额数量\n    //     },\n    //\n    //     [conf['pool']['pearlPoolAddress']]: {\n    //         pawnNum:      0, // 抵押数量\n    //         totalPawnNum: 0, // 总抵押数量\n    //         rewardNum:    0, // 已获得奖金数\n    //         lpTokenNum:   0 // lp token 余额数量\n    //     },\n    //\n    //     [conf['pool']['taiPoolAddress']]: {\n    //         pawnNum:      0, // 抵押数量\n    //         totalPawnNum: 0, // 总抵押数量\n    //         rewardNum:    0, // 已获得奖金数\n    //         lpTokenNum:   0 // lp token 余额数量\n    //     },\n    //\n    //     [conf['pool']['usdtPoolAddress']]: {\n    //         pawnNum:      0, // 抵押数量\n    //         totalPawnNum: 0, // 总抵押数量\n    //         rewardNum:    0, // 已获得奖金数\n    //         lpTokenNum:   0 // lp token 余额数量\n    //     },\n    //\n    //     [conf['pool']['tigerPoolAddress']]: {\n    //         pawnNum:      0, // 抵押数量\n    //         totalPawnNum: 0, // 总抵押数量\n    //         rewardNum:    0, // 已获得奖金数\n    //         lpTokenNum:   0 // lp token 余额数量\n    //     },\n    //\n    //     [conf['pool']['tigercPoolAddress']]: {\n    //         pawnNum:      0, // 抵押数量\n    //         totalPawnNum: 0, // 总抵押数量\n    //         rewardNum:    0, // 已获得奖金数\n    //         lpTokenNum:   0 // lp token 余额数量\n    //     }\n    //\n    // }\n    // 事件管理器\n\n    this.eventEmitter = new EventEmitter();\n\n    this._init();\n  }\n\n  _init() {\n    const timerRec = setInterval(() => {\n      if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\n        clearInterval(timerRec);\n        this.tronWrap = window.tronWeb;\n        this.eventEmitter.emit(this.eventConstant.wallet_connection); // 派发钱包连接事件\n        // 获得钱包后监听、网络、账户、节点等变化\n        // window.addEventListener('message', function (e) {\n        //   if (e.data.message && e.data.message.action == \"tabReply\") {\n        //     window.location.reload();\n        //   }\n        //   if (e.data.message && e.data.message.action == \"setAccount\") {\n        //     window.location.reload();\n        //   }\n        //   if (e.data.message && e.data.message.action == \"setNode\") {\n        //     window.location.reload();\n        //   }\n        // });\n      }\n    }, 10);\n  } // 获取默认地址\n\n\n  getDefaultAddress() {\n    if (typeof this.tronWrap === 'undefined') {\n      return {\n        code: -1,\n        msg: '未连接钱包'\n      };\n    }\n\n    return {\n      code: 0,\n      data: this.tronWrap.defaultAddress.base58\n    };\n  }\n  /**\n   * 根据合约地址查询余额\n   * 查询余额 balanceOf(address account) view\n   *\n   * @param {string} contractAddress 合约地址\n   * @param {string} myAccount 查询谁的账户\n   */\n\n\n  async _getBalanceOf(contractAddress, myAccount) {\n    if (typeof this.tronWrap === 'undefined' || this.getDefaultAddress().code === -1) {\n      return {\n        code: -1,\n        msg: '未连接钱包'\n      };\n    }\n\n    const args = [{\n      type: \"address\",\n      value: myAccount\n    }];\n    const result = await this.tronWrap.transactionBuilder.triggerConstantContract(contractAddress, \"balanceOf(address)\", {}, args, this.getDefaultAddress().data);\n    return {\n      code: 0,\n      data: this.tronWrap.toBigNumber(\"0x\" + result.constant_result[0])\n    };\n  }\n  /**\n   * 根据合约地址查询总量\n   * 查询总量 totalSupply() view\n   *\n   * @param {string} contractAddress 合约地址\n   */\n\n\n  async _getTotalSupply(contractAddress) {\n    if (typeof this.tronWrap === 'undefined') {\n      return {\n        code: -1,\n        msg: '未连接钱包'\n      };\n    }\n\n    const contract = await this.tronWrap.contract().at(contractAddress);\n    const result = await contract.totalSupply().call();\n    console.log('根据合约地址查询总量>>>', result);\n    return {\n      code: 0,\n      data: this.tronWrap.toBigNumber(result._hex)\n    };\n  }\n  /**\n   * 根据合约地址查询、我的奖励\n   * 我的奖励 earned(address account) view\n   * @param {string} contractAddress 合约地址\n   * @param {string} myAccount 查询谁的账户\n   */\n\n\n  async _getEarned(contractAddress, myAccount) {\n    if (typeof this.tronWrap === 'undefined') {\n      return {\n        code: -1,\n        msg: '未连接钱包'\n      };\n    }\n\n    const contract = await this.tronWrap.contract().at(contractAddress);\n    const result = await contract.earned(this.getDefaultAddress().data).call();\n    console.log('根据合约地址查询、我的奖励>>>', result);\n    return {\n      code: 0,\n      data: this.tronWrap.toBigNumber(result._hex)\n    };\n  }\n  /**\n   * 根据合约地址、存款\n   * 存款 stake(uint256 amount)\n   * @param {string} contractAddress 合约地址\n   * @param {number} myNum 查询谁的账户\n   */\n\n\n  async stake(contractAddress, myNum) {\n    if (typeof this.tronWrap === 'undefined') {\n      return {\n        code: -1,\n        msg: '未连接钱包'\n      };\n    }\n\n    const contract = await this.tronWrap.contract().at(contractAddress); // myNum 处理下精度、单位转换问题\n\n    const result = await contract.stake(this.tronWrap.toBigNumber(myNum).toString(10)).send({\n      feeLimit: 1e8,\n      callValue: 0,\n      shouldPollResponse: !0\n    });\n    console.log('根据合约地址、存款>>>', result);\n    return result;\n  }\n  /**\n   * 根据合约地址、安全的存款。检验是否授权\n   * 存款 safeInvestment(uint256 amount)\n   * @param {string} lpAddress lp 合约地址\n   * @param {string} contractAddress 合约地址\n   * @param {number} myNum 查询谁的账户\n   */\n\n\n  async safeInvest(contractAddress, lpAddress, myNum) {\n    return await this.stake(contractAddress, myNum);\n  }\n  /**\n   * 根据合约地址、撤出资金池\n   * 存款 withdraw(uint256 amount)\n   * @param {string} contractAddress 合约地址\n   * @param {number} myNum 查询谁的账户\n   */\n\n\n  async withdraw(contractAddress, myNum) {\n    if (typeof this.tronWrap === 'undefined') {\n      return {\n        code: -1,\n        msg: '未连接钱包'\n      };\n    }\n\n    const contract = await this.tronWrap.contract().at(contractAddress); // myNum 处理下精度、单位转换问题\n\n    const result = await contract.withdraw(this.tronWrap.toBigNumber(myNum).toString(10)).send({\n      feeLimit: 1e8,\n      callValue: 0,\n      shouldPollResponse: !0\n    });\n    console.log('根据合约地址、撤出资金池>>>', result);\n    return result;\n  }\n  /**\n   * 根据合约地址、领取奖励\n   * 领取奖励 getReward()\n   * @param {string} contractAddress 合约地址\n   */\n\n\n  async getReward(contractAddress) {\n    if (typeof this.tronWrap === 'undefined') {\n      return {\n        code: -1,\n        msg: '未连接钱包'\n      };\n    }\n\n    const contract = await this.tronWrap.contract().at(contractAddress);\n    const result = await contract.getReward().send({\n      feeLimit: 1e8,\n      callValue: 0,\n      shouldPollResponse: !0\n    });\n    console.log('根据合约地址、领取奖励>>>', result);\n    return result;\n  }\n  /**\n   * 根据合约地址、退出\n   * 领取奖励 exit()\n   * @param {string} contractAddress 合约地址\n   */\n\n\n  async exit(contractAddress) {\n    if (typeof this.tronWrap === 'undefined') {\n      return {\n        code: -1,\n        msg: '未连接钱包'\n      };\n    }\n\n    const contract = await this.tronWrap.contract().at(contractAddress);\n    const result = await contract.exit().send({\n      feeLimit: 1e8,\n      callValue: 0,\n      shouldPollResponse: !0\n    });\n    console.log('根据合约地址、退出>>>', result);\n    return result;\n  }\n  /**\n   * 根据合约地址、授权金额\n   * 授权金额 \"approve(address,uint256)\"\n   * @param {string} contractAddress 合约地址\n   * @param {string} spendAccount 花钱的人地址\n   * @param {number} myNum 数量\n   */\n\n\n  async approve(contractAddress, spendAccount, myNum) {\n    if (typeof this.tronWrap === 'undefined' || this.getDefaultAddress().code === -1) {\n      return {\n        code: -1,\n        msg: '未连接钱包'\n      };\n    }\n\n    const r = [{\n      type: \"address\",\n      value: spendAccount\n    }, {\n      type: \"uint256\",\n      value: \"115792089237316195423570985008687907853269984665640564039457584007913129639934\"\n    }];\n    const result = await this.tronWrap.transactionBuilder.triggerSmartContract(contractAddress, \"approve(address,uint256)\", {}, r, this.getDefaultAddress().data);\n    const aaa = await this.tronWrap.trx.sign(result.transaction);\n    const bb = this.tronWrap.trx.sendRawTransaction(aaa);\n    console.log('根据合约地址、授权金额>>>', bb);\n    return bb;\n  }\n  /**\n   * 根据合约地址查询、查询授权金额\n   * 查询授权金额 \"allowance(address,address)\" 我的钱可以谁花\n   * @param {string} contractAddress 合约地址\n   * @param {string} myAccount 我的钱\n   * @param {string} spendAccount 可以花钱的人\n   */\n\n\n  async allowance(contractAddress, myAccount, spendAccount) {\n    if (typeof this.tronWrap === 'undefined') {\n      return {\n        code: -1,\n        msg: '未连接钱包'\n      };\n    }\n\n    const arg = [{\n      type: \"address\",\n      value: this.getDefaultAddress().data\n    }, {\n      type: \"address\",\n      value: spendAccount\n    }];\n    const result = await this.tronWrap.transactionBuilder.triggerConstantContract(contractAddress, \"allowance(address,address)\", {}, arg, this.getDefaultAddress().data);\n    return {\n      code: 0,\n      data: this.tronWrap.toBigNumber(\"0x\" + result.constant_result[0])\n    };\n  }\n  /**\n   * 获取单个池子目前 totalSupply\n   * @param {string} contractAddress 合约地址\n   * @returns {Promise<void>}\n   */\n\n\n  async poolTotal(contractAddress) {\n    const contract = await this.tronWrap.contract().at(contractAddress);\n    const result = await contract.totalSupply().call();\n    console.log('根据合约地址、获取 totalSupply>>>', result);\n    return this.tronWrap.toDecimal(result);\n  }\n\n  getLP(contractName) {\n    return new Promise((resolve, reject) => {\n      let trigger = this.tronWrap.transactionBuilder.triggerConfirmedConstantContract(contractName, `totalSupply()`, {});\n      trigger.then(tx => {\n        if (!tx.result.result) {\n          reject(\"result is false\");\n        }\n\n        let amount = this.tronWrap.toDecimal(\"0x\" + tx.constant_result[0]);\n        resolve(amount);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  } // lp 占 erc20 数量\n\n\n  getContractToUSDT(erc20Contract, lPContract) {\n    return new Promise((resolve, reject) => {\n      const trigger = this.tronWrap.transactionBuilder.triggerConfirmedConstantContract(erc20Contract, `balanceOf(address)`, {}, [{\n        type: `address`,\n        value: lPContract\n      }], lPContract);\n      trigger.then(tx => {\n        if (!tx.result.result) {\n          throw new Error(`result is false`);\n        }\n\n        let amount = this.tronWrap.toDecimal(\"0x\" + tx.constant_result[0]);\n        resolve(amount); // console.log(tronWeb.fromSun(amount))\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  getTrxToTokenPrice(lpContract, quantity) {\n    return new Promise((resolve, reject) => {\n      let trigger = this.tronWrap.transactionBuilder.triggerConfirmedConstantContract(lpContract, `getTokenToTrxOutputPrice(uint256)`, {}, [{\n        type: `uint256`,\n        value: quantity\n      }]);\n      trigger.then(async tx => {\n        let amount = this.tronWrap.toDecimal(\"0x\" + tx.constant_result[0]);\n        resolve(amount);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  getTokenUSDTPrice(lpContract, quantity) {\n    return new Promise((resolve, reject) => {\n      let trigger = this.tronWrap.transactionBuilder.triggerConfirmedConstantContract(lpContract, `getTrxToTokenInputPrice(uint256)`, {}, [{\n        type: `uint256`,\n        value: quantity\n      }]);\n      trigger.then(async tx => {\n        let amount = this.tronWrap.toDecimal(\"0x\" + tx.constant_result[0]);\n        resolve(amount);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  /*\n  * 池子 a 年化\n  * poolContract TQiGSmof81YPCYWzaPT8aTmMEt82dGymAt\n  * lpContract TWhR2Be1XLGa4z8xgvPDvfArA1pmCtz6Tq\n  * trc20Contract THRBFeEwKUoREVJCFpLm7JF4ph24bZAVDG\n  *\n  * fieldRate 1天挖矿速率\n  * */\n\n\n  async poolYearRate(trc20Contract, poolContract, lpContract, baseTokenContract, fixedRate) {\n    console.log(trc20Contract, poolContract, lpContract, baseTokenContract);\n    let myLP = await this.getLP(poolContract);\n    let fullLP = await this.getLP(lpContract);\n    let ratio = myLP / fullLP;\n    console.log(\"myLP: \" + myLP);\n    console.log(\"fullLP: \" + fullLP);\n    console.log(\"占比: \" + ratio);\n    console.log(trc20Contract, lpContract);\n    let lpTotal = await this.getContractToUSDT(trc20Contract, lpContract);\n    lpTotal = lpTotal / 1e18;\n    console.log(\"LP 占 trc20 数量: \" + lpTotal);\n    let tig = await this.getTrxToTokenPrice(baseTokenContract, 1);\n    tig = 1 / (tig / 1e12);\n    let toTrx = await this.getTrxToTokenPrice(lpContract, 1);\n    toTrx = 1 / (toTrx / 1e12);\n    let a = ratio * (lpTotal * 2) * toTrx;\n    console.log(\"1 token: \" + tig + \"trx\");\n    console.log(\"1 token to trx: \" + toTrx + \"trx\");\n    console.log(\"a市值: \" + a);\n    fixedRate = fixedRate || 0;\n    let usdtToTrx = await this.getTokenUSDTPrice(\"TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE\", 1e6);\n    usdtToTrx = usdtToTrx / 1e6;\n    console.log(\"1 trx: \" + usdtToTrx + \"usdt\");\n    let a_rate = fixedRate * tig / a;\n    console.log(\"a_rate: \" + a_rate); // console.log(\"年化: \" + Math.pow(a_rate + 1, 356) * 100)\n\n    let yearRate = (a_rate + 1) * 356 * 100;\n    console.log(\"年化: \" + yearRate);\n    console.log(\"----------\");\n    return new Promise((resolve, reject) => {\n      resolve(Math.floor(yearRate));\n    });\n  }\n\n  async poolUSDTYearRate(trc20Contract, poolContract, lpContract, baseTokenContract, fixedRate) {\n    console.log(trc20Contract, poolContract, lpContract, baseTokenContract);\n    let myLP = await this.getLP(poolContract);\n    let fullLP = await this.getLP(lpContract);\n    let ratio = myLP / fullLP;\n    console.log(\"myLP: \" + myLP);\n    console.log(\"fullLP: \" + fullLP);\n    console.log(\"占比: \" + ratio);\n    let lpTotal = await this.getContractToUSDT(trc20Contract, lpContract);\n    lpTotal = lpTotal / 1e6;\n    console.log(\"LP 占 trc20 数量: \" + lpTotal);\n    let a = ratio * (lpTotal * 2);\n    console.log(\"a市值: \" + a); // let fieldRate = 642857\n\n    fixedRate = fixedRate || 0;\n    let tig = await this.getTrxToTokenPrice(baseTokenContract, 1);\n    tig = 1 / (tig / 1e12);\n    console.log(\"1 token: \" + tig + \"trx\");\n    let usdtToTrx = await this.getTokenUSDTPrice(\"TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE\", 1e6);\n    usdtToTrx = usdtToTrx / 1e6;\n    console.log(\"1 trx: \" + usdtToTrx + \"usdt\"); // myLP: 98455000\n    // wallet.js:565 fullLP: 2118588115628446\n    // wallet.js:566 占比: 4.647198729838757e-8\n    // wallet.js:571 LP 占 trc20 数量: 64125433.456946\n    // wallet.js:532 1 token: 0.0169127445614111trx\n    // wallet.js:576 a市值: 5.960072658229584\n    // wallet.js:593 a_rate: 5.056624220777389\n    // wallet.js:598 年化: 215615.82225967504\n\n    let a_rate = fixedRate * tig * usdtToTrx / a;\n    console.log(\"a_rate: \" + a_rate); // console.log(\"年化: \" + Math.pow(a_rate + 1, 356) * 100)\n\n    let yearRate = (a_rate + 1) * 356 * 100;\n    console.log(\"年化: \" + yearRate);\n    console.log(\"----------\");\n    return new Promise((resolve, reject) => {\n      resolve(Math.floor(yearRate));\n    });\n  }\n\n  async readMint(contractAddress) {\n    const contract = await this.tronWrap.contract().at(contractAddress);\n    const result = await contract.starttime().call();\n    return this.tronWrap.toDecimal(result);\n  }\n\n  async rewardRate(contractAddress) {\n    const contract = await this.tronWrap.contract().at(contractAddress);\n    const result = await contract.rewardRate().call();\n    return this.tronWrap.toDecimal(result);\n  }\n\n}\n\nexport default new Wallet();","map":{"version":3,"sources":["/Users/zhaohongwei/Downloads/fomoswap/src/tools/wallet.js"],"names":["conf","EventEmitter","Wallet","constructor","tronWrap","window","tronWeb","eventConstant","wallet_connection","eventEmitter","_init","timerRec","setInterval","defaultAddress","base58","clearInterval","emit","getDefaultAddress","code","msg","data","_getBalanceOf","contractAddress","myAccount","args","type","value","result","transactionBuilder","triggerConstantContract","toBigNumber","constant_result","_getTotalSupply","contract","at","totalSupply","call","console","log","_hex","_getEarned","earned","stake","myNum","toString","send","feeLimit","callValue","shouldPollResponse","safeInvest","lpAddress","withdraw","getReward","exit","approve","spendAccount","r","triggerSmartContract","aaa","trx","sign","transaction","bb","sendRawTransaction","allowance","arg","poolTotal","toDecimal","getLP","contractName","Promise","resolve","reject","trigger","triggerConfirmedConstantContract","then","tx","amount","catch","err","getContractToUSDT","erc20Contract","lPContract","Error","getTrxToTokenPrice","lpContract","quantity","getTokenUSDTPrice","poolYearRate","trc20Contract","poolContract","baseTokenContract","fixedRate","myLP","fullLP","ratio","lpTotal","tig","toTrx","a","usdtToTrx","a_rate","yearRate","Math","floor","poolUSDTYearRate","readMint","starttime","rewardRate"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,YAAP,MAAyB,eAAzB;;AAEA,MAAMC,MAAN,CAAa;AAETC,EAAAA,WAAW,GAAG;AAEV;AACA,SAAKC,QAAL,GAAgBC,MAAM,CAACC,OAAvB,CAHU,CAKV;;AACA,SAAKC,aAAL,GAAqB;AACjBC,MAAAA,iBAAiB,EAAE,mBADF,CACuB;AAExC;AACA;AACA;AACA;AACA;AACA;;AARiB,KAArB,CANU,CAiBV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,SAAKC,YAAL,GAAoB,IAAIR,YAAJ,EAApB;;AAEA,SAAKS,KAAL;AACH;;AAEDA,EAAAA,KAAK,GAAG;AACJ,UAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/B,UAAIP,MAAM,CAACC,OAAP,IAAkBD,MAAM,CAACC,OAAP,CAAeO,cAAf,CAA8BC,MAApD,EAA4D;AACxDC,QAAAA,aAAa,CAACJ,QAAD,CAAb;AACA,aAAKP,QAAL,GAAgBC,MAAM,CAACC,OAAvB;AAEA,aAAKG,YAAL,CAAkBO,IAAlB,CAAuB,KAAKT,aAAL,CAAmBC,iBAA1C,EAJwD,CAIK;AAE7D;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACH;AACJ,KAtB2B,EAsBzB,EAtByB,CAA5B;AAuBH,GA/FQ,CAiGT;;;AACAS,EAAAA,iBAAiB,GAAG;AAEhB,QAAI,OAAO,KAAKb,QAAZ,KAAyB,WAA7B,EAA0C;AACtC,aAAO;AACHc,QAAAA,IAAI,EAAE,CAAC,CADJ;AAEHC,QAAAA,GAAG,EAAG;AAFH,OAAP;AAIH;;AAED,WAAO;AACHD,MAAAA,IAAI,EAAE,CADH;AAEHE,MAAAA,IAAI,EAAE,KAAKhB,QAAL,CAAcS,cAAd,CAA6BC;AAFhC,KAAP;AAIH;AAED;;;;;;;;;AAOA,QAAMO,aAAN,CAAoBC,eAApB,EAAqCC,SAArC,EAAgD;AAE5C,QAAI,OAAO,KAAKnB,QAAZ,KAAyB,WAAzB,IAAwC,KAAKa,iBAAL,GAAyBC,IAAzB,KAAkC,CAAC,CAA/E,EAAkF;AAC9E,aAAO;AACHA,QAAAA,IAAI,EAAE,CAAC,CADJ;AAEHC,QAAAA,GAAG,EAAG;AAFH,OAAP;AAIH;;AAED,UAAMK,IAAI,GAAG,CACT;AACIC,MAAAA,IAAI,EAAG,SADX;AAEIC,MAAAA,KAAK,EAAEH;AAFX,KADS,CAAb;AAOA,UAAMI,MAAM,GAAG,MAAM,KAAKvB,QAAL,CAChBwB,kBADgB,CAEhBC,uBAFgB,CAGbP,eAHa,EAIb,oBAJa,EAKb,EALa,EAMbE,IANa,EAOb,KAAKP,iBAAL,GAAyBG,IAPZ,CAArB;AAUA,WAAO;AACHF,MAAAA,IAAI,EAAE,CADH;AAEHE,MAAAA,IAAI,EAAE,KAAKhB,QAAL,CAAc0B,WAAd,CAA0B,OAAOH,MAAM,CAACI,eAAP,CAAuB,CAAvB,CAAjC;AAFH,KAAP;AAIH;AAED;;;;;;;;AAMA,QAAMC,eAAN,CAAsBV,eAAtB,EAAuC;AAEnC,QAAI,OAAO,KAAKlB,QAAZ,KAAyB,WAA7B,EAA0C;AACtC,aAAO;AACHc,QAAAA,IAAI,EAAE,CAAC,CADJ;AAEHC,QAAAA,GAAG,EAAG;AAFH,OAAP;AAIH;;AAED,UAAMc,QAAQ,GAAG,MAAM,KAAK7B,QAAL,CAAc6B,QAAd,GAAyBC,EAAzB,CAA4BZ,eAA5B,CAAvB;AACA,UAAMK,MAAM,GAAK,MAAMM,QAAQ,CAACE,WAAT,GAAuBC,IAAvB,EAAvB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BX,MAA7B;AAEA,WAAO;AACHT,MAAAA,IAAI,EAAE,CADH;AAEHE,MAAAA,IAAI,EAAE,KAAKhB,QAAL,CAAc0B,WAAd,CAA0BH,MAAM,CAACY,IAAjC;AAFH,KAAP;AAIH;AAED;;;;;;;;AAMA,QAAMC,UAAN,CAAiBlB,eAAjB,EAAkCC,SAAlC,EAA6C;AAEzC,QAAI,OAAO,KAAKnB,QAAZ,KAAyB,WAA7B,EAA0C;AACtC,aAAO;AACHc,QAAAA,IAAI,EAAE,CAAC,CADJ;AAEHC,QAAAA,GAAG,EAAG;AAFH,OAAP;AAIH;;AAED,UAAMc,QAAQ,GAAG,MAAM,KAAK7B,QAAL,CAAc6B,QAAd,GAAyBC,EAAzB,CAA4BZ,eAA5B,CAAvB;AAEA,UAAMK,MAAM,GAAG,MAAMM,QAAQ,CAACQ,MAAT,CAAgB,KAAKxB,iBAAL,GAAyBG,IAAzC,EAA+CgB,IAA/C,EAArB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCX,MAAhC;AAEA,WAAO;AACHT,MAAAA,IAAI,EAAE,CADH;AAEHE,MAAAA,IAAI,EAAE,KAAKhB,QAAL,CAAc0B,WAAd,CAA0BH,MAAM,CAACY,IAAjC;AAFH,KAAP;AAIH;AAED;;;;;;;;AAMA,QAAMG,KAAN,CAAYpB,eAAZ,EAA6BqB,KAA7B,EAAoC;AAEhC,QAAI,OAAO,KAAKvC,QAAZ,KAAyB,WAA7B,EAA0C;AACtC,aAAO;AACHc,QAAAA,IAAI,EAAE,CAAC,CADJ;AAEHC,QAAAA,GAAG,EAAG;AAFH,OAAP;AAIH;;AAED,UAAMc,QAAQ,GAAG,MAAM,KAAK7B,QAAL,CAAc6B,QAAd,GAAyBC,EAAzB,CAA4BZ,eAA5B,CAAvB,CATgC,CAWhC;;AACA,UAAMK,MAAM,GAAG,MAAMM,QAAQ,CAACS,KAAT,CAAe,KAAKtC,QAAL,CAAc0B,WAAd,CAA0Ba,KAA1B,EAAiCC,QAAjC,CAA0C,EAA1C,CAAf,EAA8DC,IAA9D,CAAmE;AACpFC,MAAAA,QAAQ,EAAY,GADgE;AAEpFC,MAAAA,SAAS,EAAW,CAFgE;AAGpFC,MAAAA,kBAAkB,EAAE,CAAC;AAH+D,KAAnE,CAArB;AAMAX,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BX,MAA5B;AAEA,WAAOA,MAAP;AACH;AAED;;;;;;;;;AAOA,QAAMsB,UAAN,CAAiB3B,eAAjB,EAAkC4B,SAAlC,EAA6CP,KAA7C,EAAoD;AAEhD,WAAO,MAAM,KAAKD,KAAL,CAAWpB,eAAX,EAA4BqB,KAA5B,CAAb;AAEH;AAGD;;;;;;;;AAMA,QAAMQ,QAAN,CAAe7B,eAAf,EAAgCqB,KAAhC,EAAuC;AACnC,QAAI,OAAO,KAAKvC,QAAZ,KAAyB,WAA7B,EAA0C;AACtC,aAAO;AACHc,QAAAA,IAAI,EAAE,CAAC,CADJ;AAEHC,QAAAA,GAAG,EAAG;AAFH,OAAP;AAIH;;AAED,UAAMc,QAAQ,GAAG,MAAM,KAAK7B,QAAL,CAAc6B,QAAd,GAAyBC,EAAzB,CAA4BZ,eAA5B,CAAvB,CARmC,CAUnC;;AACA,UAAMK,MAAM,GAAG,MAAMM,QAAQ,CAACkB,QAAT,CAAkB,KAAK/C,QAAL,CAAc0B,WAAd,CAA0Ba,KAA1B,EAAiCC,QAAjC,CAA0C,EAA1C,CAAlB,EAAiEC,IAAjE,CAAsE;AACvFC,MAAAA,QAAQ,EAAY,GADmE;AAEvFC,MAAAA,SAAS,EAAW,CAFmE;AAGvFC,MAAAA,kBAAkB,EAAE,CAAC;AAHkE,KAAtE,CAArB;AAMAX,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BX,MAA/B;AAEA,WAAOA,MAAP;AACH;AAED;;;;;;;AAKA,QAAMyB,SAAN,CAAgB9B,eAAhB,EAAiC;AAE7B,QAAI,OAAO,KAAKlB,QAAZ,KAAyB,WAA7B,EAA0C;AACtC,aAAO;AACHc,QAAAA,IAAI,EAAE,CAAC,CADJ;AAEHC,QAAAA,GAAG,EAAG;AAFH,OAAP;AAIH;;AAED,UAAMc,QAAQ,GAAG,MAAM,KAAK7B,QAAL,CAAc6B,QAAd,GAAyBC,EAAzB,CAA4BZ,eAA5B,CAAvB;AAEA,UAAMK,MAAM,GAAG,MAAMM,QAAQ,CAACmB,SAAT,GAAqBP,IAArB,CAA0B;AAC3CC,MAAAA,QAAQ,EAAY,GADuB;AAE3CC,MAAAA,SAAS,EAAW,CAFuB;AAG3CC,MAAAA,kBAAkB,EAAE,CAAC;AAHsB,KAA1B,CAArB;AAMAX,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BX,MAA9B;AAEA,WAAOA,MAAP;AACH;AAED;;;;;;;AAKA,QAAM0B,IAAN,CAAW/B,eAAX,EAA4B;AAExB,QAAI,OAAO,KAAKlB,QAAZ,KAAyB,WAA7B,EAA0C;AACtC,aAAO;AACHc,QAAAA,IAAI,EAAE,CAAC,CADJ;AAEHC,QAAAA,GAAG,EAAG;AAFH,OAAP;AAIH;;AAED,UAAMc,QAAQ,GAAG,MAAM,KAAK7B,QAAL,CAAc6B,QAAd,GAAyBC,EAAzB,CAA4BZ,eAA5B,CAAvB;AAEA,UAAMK,MAAM,GAAG,MAAMM,QAAQ,CAACoB,IAAT,GAAgBR,IAAhB,CAAqB;AACtCC,MAAAA,QAAQ,EAAY,GADkB;AAEtCC,MAAAA,SAAS,EAAW,CAFkB;AAGtCC,MAAAA,kBAAkB,EAAE,CAAC;AAHiB,KAArB,CAArB;AAMAX,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BX,MAA5B;AAEA,WAAOA,MAAP;AACH;AAED;;;;;;;;;AAOA,QAAM2B,OAAN,CAAchC,eAAd,EAA+BiC,YAA/B,EAA6CZ,KAA7C,EAAoD;AAEhD,QAAI,OAAO,KAAKvC,QAAZ,KAAyB,WAAzB,IAAwC,KAAKa,iBAAL,GAAyBC,IAAzB,KAAkC,CAAC,CAA/E,EAAkF;AAC9E,aAAO;AACHA,QAAAA,IAAI,EAAE,CAAC,CADJ;AAEHC,QAAAA,GAAG,EAAG;AAFH,OAAP;AAIH;;AAED,UAAMqC,CAAC,GAAG,CACN;AACI/B,MAAAA,IAAI,EAAG,SADX;AAEIC,MAAAA,KAAK,EAAE6B;AAFX,KADM,EAIH;AACC9B,MAAAA,IAAI,EAAG,SADR;AAECC,MAAAA,KAAK,EAAE;AAFR,KAJG,CAAV;AAUA,UAAMC,MAAM,GAAG,MAAM,KAAKvB,QAAL,CAChBwB,kBADgB,CAEhB6B,oBAFgB,CAGbnC,eAHa,EAIb,0BAJa,EAKb,EALa,EAMbkC,CANa,EAOb,KAAKvC,iBAAL,GAAyBG,IAPZ,CAArB;AAUA,UAAMsC,GAAG,GAAG,MAAM,KAAKtD,QAAL,CAAcuD,GAAd,CAAkBC,IAAlB,CAAuBjC,MAAM,CAACkC,WAA9B,CAAlB;AACA,UAAMC,EAAE,GAAI,KAAK1D,QAAL,CAAcuD,GAAd,CAAkBI,kBAAlB,CAAqCL,GAArC,CAAZ;AACArB,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BwB,EAA9B;AAEA,WAAOA,EAAP;AACH;AAED;;;;;;;;;AAOA,QAAME,SAAN,CAAgB1C,eAAhB,EAAiCC,SAAjC,EAA4CgC,YAA5C,EAA0D;AAEtD,QAAI,OAAO,KAAKnD,QAAZ,KAAyB,WAA7B,EAA0C;AACtC,aAAO;AACHc,QAAAA,IAAI,EAAE,CAAC,CADJ;AAEHC,QAAAA,GAAG,EAAG;AAFH,OAAP;AAIH;;AAED,UAAM8C,GAAG,GAAG,CACR;AACIxC,MAAAA,IAAI,EAAG,SADX;AAEIC,MAAAA,KAAK,EAAE,KAAKT,iBAAL,GAAyBG;AAFpC,KADQ,EAIL;AACCK,MAAAA,IAAI,EAAG,SADR;AAECC,MAAAA,KAAK,EAAE6B;AAFR,KAJK,CAAZ;AAUA,UAAM5B,MAAM,GAAG,MAAM,KAAKvB,QAAL,CAChBwB,kBADgB,CAEhBC,uBAFgB,CAGbP,eAHa,EAIb,4BAJa,EAKb,EALa,EAMb2C,GANa,EAOb,KAAKhD,iBAAL,GAAyBG,IAPZ,CAArB;AAUA,WAAO;AACHF,MAAAA,IAAI,EAAE,CADH;AAEHE,MAAAA,IAAI,EAAE,KAAKhB,QAAL,CAAc0B,WAAd,CAA0B,OAAOH,MAAM,CAACI,eAAP,CAAuB,CAAvB,CAAjC;AAFH,KAAP;AAKH;AAED;;;;;;;AAKA,QAAMmC,SAAN,CAAgB5C,eAAhB,EAAiC;AAC7B,UAAMW,QAAQ,GAAG,MAAM,KAAK7B,QAAL,CAAc6B,QAAd,GAAyBC,EAAzB,CAA4BZ,eAA5B,CAAvB;AAEA,UAAMK,MAAM,GAAG,MAAMM,QAAQ,CAACE,WAAT,GAAuBC,IAAvB,EAArB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCX,MAAxC;AAEA,WAAO,KAAKvB,QAAL,CAAc+D,SAAd,CAAwBxC,MAAxB,CAAP;AACH;;AAEDyC,EAAAA,KAAK,CAACC,YAAD,EAAe;AAChB,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAIC,OAAO,GAAG,KAAKrE,QAAL,CAAcwB,kBAAd,CAAiC8C,gCAAjC,CAAkEL,YAAlE,EAAiF,eAAjF,EAAiG,EAAjG,CAAd;AAEAI,MAAAA,OAAO,CAACE,IAAR,CAAaC,EAAE,IAAI;AACf,YAAI,CAACA,EAAE,CAACjD,MAAH,CAAUA,MAAf,EAAuB;AACnB6C,UAAAA,MAAM,CAAC,iBAAD,CAAN;AACH;;AAED,YAAIK,MAAM,GAAG,KAAKzE,QAAL,CAAc+D,SAAd,CAAwB,OAAOS,EAAE,CAAC7C,eAAH,CAAmB,CAAnB,CAA/B,CAAb;AAEAwC,QAAAA,OAAO,CAACM,MAAD,CAAP;AACH,OARD,EAQGC,KARH,CAQSC,GAAG,IAAI;AACZP,QAAAA,MAAM,CAACO,GAAD,CAAN;AACH,OAVD;AAWH,KAdM,CAAP;AAeH,GA/bQ,CAicT;;;AACAC,EAAAA,iBAAiB,CAACC,aAAD,EAAgBC,UAAhB,EAA4B;AACzC,WAAO,IAAIZ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,YAAMC,OAAO,GAAG,KAAKrE,QAAL,CAAcwB,kBAAd,CAAiC8C,gCAAjC,CAAkEO,aAAlE,EAAkF,oBAAlF,EAAuG,EAAvG,EACZ,CACI;AACIxD,QAAAA,IAAI,EAAI,SADZ;AAEIC,QAAAA,KAAK,EAAEwD;AAFX,OADJ,CADY,EAMTA,UANS,CAAhB;AAQAT,MAAAA,OAAO,CAACE,IAAR,CAAaC,EAAE,IAAI;AACf,YAAI,CAACA,EAAE,CAACjD,MAAH,CAAUA,MAAf,EAAuB;AACnB,gBAAM,IAAIwD,KAAJ,CAAW,iBAAX,CAAN;AACH;;AAED,YAAIN,MAAM,GAAG,KAAKzE,QAAL,CAAc+D,SAAd,CAAwB,OAAOS,EAAE,CAAC7C,eAAH,CAAmB,CAAnB,CAA/B,CAAb;AAEAwC,QAAAA,OAAO,CAACM,MAAD,CAAP,CAPe,CAQf;AACH,OATD,EASGC,KATH,CASSC,GAAG,IAAI;AACZP,QAAAA,MAAM,CAACO,GAAD,CAAN;AACH,OAXD;AAYH,KArBM,CAAP;AAsBH;;AAEDK,EAAAA,kBAAkB,CAACC,UAAD,EAAaC,QAAb,EAAuB;AACrC,WAAO,IAAIhB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAIC,OAAO,GAAG,KAAKrE,QAAL,CAAcwB,kBAAd,CAAiC8C,gCAAjC,CAAkEW,UAAlE,EAA+E,mCAA/E,EAAmH,EAAnH,EACV,CACI;AACI5D,QAAAA,IAAI,EAAI,SADZ;AAEIC,QAAAA,KAAK,EAAE4D;AAFX,OADJ,CADU,CAAd;AAQAb,MAAAA,OAAO,CAACE,IAAR,CAAa,MAAMC,EAAN,IAAY;AACrB,YAAIC,MAAM,GAAG,KAAKzE,QAAL,CAAc+D,SAAd,CAAwB,OAAOS,EAAE,CAAC7C,eAAH,CAAmB,CAAnB,CAA/B,CAAb;AAEAwC,QAAAA,OAAO,CAACM,MAAD,CAAP;AACH,OAJD,EAIGC,KAJH,CAISC,GAAG,IAAI;AACZP,QAAAA,MAAM,CAACO,GAAD,CAAN;AACH,OAND;AAQH,KAjBM,CAAP;AAkBH;;AAEDQ,EAAAA,iBAAiB,CAACF,UAAD,EAAaC,QAAb,EAAuB;AACpC,WAAO,IAAIhB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAIC,OAAO,GAAG,KAAKrE,QAAL,CAAcwB,kBAAd,CAAiC8C,gCAAjC,CAAkEW,UAAlE,EAA+E,kCAA/E,EAAkH,EAAlH,EACV,CACI;AACI5D,QAAAA,IAAI,EAAI,SADZ;AAEIC,QAAAA,KAAK,EAAE4D;AAFX,OADJ,CADU,CAAd;AAQAb,MAAAA,OAAO,CAACE,IAAR,CAAa,MAAMC,EAAN,IAAY;AACrB,YAAIC,MAAM,GAAG,KAAKzE,QAAL,CAAc+D,SAAd,CAAwB,OAAOS,EAAE,CAAC7C,eAAH,CAAmB,CAAnB,CAA/B,CAAb;AAEAwC,QAAAA,OAAO,CAACM,MAAD,CAAP;AACH,OAJD,EAIGC,KAJH,CAISC,GAAG,IAAI;AACZP,QAAAA,MAAM,CAACO,GAAD,CAAN;AACH,OAND;AAQH,KAjBM,CAAP;AAkBH;AAED;;;;;;;;;;AAQA,QAAMS,YAAN,CAAmBC,aAAnB,EAAkCC,YAAlC,EAAgDL,UAAhD,EAA4DM,iBAA5D,EAA+EC,SAA/E,EAA0F;AACtFvD,IAAAA,OAAO,CAACC,GAAR,CAAYmD,aAAZ,EAA2BC,YAA3B,EAAyCL,UAAzC,EAAqDM,iBAArD;AAEA,QAAIE,IAAI,GAAK,MAAM,KAAKzB,KAAL,CAAWsB,YAAX,CAAnB;AACA,QAAII,MAAM,GAAG,MAAM,KAAK1B,KAAL,CAAWiB,UAAX,CAAnB;AACA,QAAIU,KAAK,GAAIF,IAAI,GAAGC,MAApB;AAEAzD,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAWuD,IAAvB;AACAxD,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAawD,MAAzB;AACAzD,IAAAA,OAAO,CAACC,GAAR,CAAY,SAASyD,KAArB;AAEA1D,IAAAA,OAAO,CAACC,GAAR,CAAYmD,aAAZ,EAA2BJ,UAA3B;AAEA,QAAIW,OAAO,GAAG,MAAM,KAAKhB,iBAAL,CAAuBS,aAAvB,EAAsCJ,UAAtC,CAApB;AACAW,IAAAA,OAAO,GAAOA,OAAO,GAAG,IAAxB;AAEA3D,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoB0D,OAAhC;AAEA,QAAIC,GAAG,GAAG,MAAM,KAAKb,kBAAL,CAAwBO,iBAAxB,EAA2C,CAA3C,CAAhB;AACAM,IAAAA,GAAG,GAAO,KAAKA,GAAG,GAAG,IAAX,CAAV;AAEA,QAAIC,KAAK,GAAG,MAAM,KAAKd,kBAAL,CAAwBC,UAAxB,EAAoC,CAApC,CAAlB;AACAa,IAAAA,KAAK,GAAO,KAAKA,KAAK,GAAG,IAAb,CAAZ;AAEA,QAAIC,CAAC,GAAIJ,KAAK,IAAIC,OAAO,GAAG,CAAd,CAAL,GAAwBE,KAAjC;AAEA7D,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAc2D,GAAd,GAAoB,KAAhC;AACA5D,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqB4D,KAArB,GAA6B,KAAzC;AACA7D,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAU6D,CAAtB;AAEAP,IAAAA,SAAS,GAAGA,SAAS,IAAI,CAAzB;AAEA,QAAIQ,SAAS,GAAG,MAAM,KAAKb,iBAAL,CAAuB,oCAAvB,EAA6D,GAA7D,CAAtB;AACAa,IAAAA,SAAS,GAAOA,SAAS,GAAG,GAA5B;AACA/D,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAY8D,SAAZ,GAAwB,MAApC;AAEA,QAAIC,MAAM,GAAIT,SAAS,GAAGK,GAAb,GAAoBE,CAAjC;AAEA9D,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAa+D,MAAzB,EAtCsF,CAwCtF;;AACA,QAAIC,QAAQ,GAAI,CAACD,MAAM,GAAG,CAAV,IAAe,GAAhB,GAAuB,GAAtC;AAEAhE,IAAAA,OAAO,CAACC,GAAR,CAAY,SAASgE,QAArB;AACAjE,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AAEA,WAAO,IAAIgC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCD,MAAAA,OAAO,CAACgC,IAAI,CAACC,KAAL,CAAWF,QAAX,CAAD,CAAP;AACH,KAFM,CAAP;AAGH;;AAED,QAAMG,gBAAN,CAAuBhB,aAAvB,EAAsCC,YAAtC,EAAoDL,UAApD,EAAgEM,iBAAhE,EAAmFC,SAAnF,EAA8F;AAC1FvD,IAAAA,OAAO,CAACC,GAAR,CAAYmD,aAAZ,EAA2BC,YAA3B,EAAyCL,UAAzC,EAAqDM,iBAArD;AAEA,QAAIE,IAAI,GAAK,MAAM,KAAKzB,KAAL,CAAWsB,YAAX,CAAnB;AACA,QAAII,MAAM,GAAG,MAAM,KAAK1B,KAAL,CAAWiB,UAAX,CAAnB;AACA,QAAIU,KAAK,GAAIF,IAAI,GAAGC,MAApB;AAEAzD,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAWuD,IAAvB;AACAxD,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAawD,MAAzB;AACAzD,IAAAA,OAAO,CAACC,GAAR,CAAY,SAASyD,KAArB;AAEA,QAAIC,OAAO,GAAG,MAAM,KAAKhB,iBAAL,CAAuBS,aAAvB,EAAsCJ,UAAtC,CAApB;AACAW,IAAAA,OAAO,GAAOA,OAAO,GAAG,GAAxB;AAEA3D,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoB0D,OAAhC;AAGA,QAAIG,CAAC,GAAGJ,KAAK,IAAIC,OAAO,GAAG,CAAd,CAAb;AAEA3D,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAU6D,CAAtB,EAnB0F,CAqB1F;;AACAP,IAAAA,SAAS,GAAGA,SAAS,IAAI,CAAzB;AAEA,QAAIK,GAAG,GAAG,MAAM,KAAKb,kBAAL,CAAwBO,iBAAxB,EAA2C,CAA3C,CAAhB;AACAM,IAAAA,GAAG,GAAO,KAAKA,GAAG,GAAG,IAAX,CAAV;AACA5D,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAc2D,GAAd,GAAoB,KAAhC;AAEA,QAAIG,SAAS,GAAG,MAAM,KAAKb,iBAAL,CAAuB,oCAAvB,EAA6D,GAA7D,CAAtB;AACAa,IAAAA,SAAS,GAAOA,SAAS,GAAG,GAA5B;AACA/D,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAY8D,SAAZ,GAAwB,MAApC,EA9B0F,CAgC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAIC,MAAM,GAAIT,SAAS,GAAGK,GAAZ,GAAkBG,SAAnB,GAAgCD,CAA7C;AAEA9D,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAa+D,MAAzB,EA3C0F,CA6C1F;;AACA,QAAIC,QAAQ,GAAI,CAACD,MAAM,GAAG,CAAV,IAAe,GAAhB,GAAuB,GAAtC;AAEAhE,IAAAA,OAAO,CAACC,GAAR,CAAY,SAASgE,QAArB;AACAjE,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AAEA,WAAO,IAAIgC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCD,MAAAA,OAAO,CAACgC,IAAI,CAACC,KAAL,CAAWF,QAAX,CAAD,CAAP;AACH,KAFM,CAAP;AAGH;;AAGD,QAAMI,QAAN,CAAepF,eAAf,EAAgC;AAC5B,UAAMW,QAAQ,GAAG,MAAM,KAAK7B,QAAL,CAAc6B,QAAd,GAAyBC,EAAzB,CAA4BZ,eAA5B,CAAvB;AAEA,UAAMK,MAAM,GAAG,MAAMM,QAAQ,CAAC0E,SAAT,GAAqBvE,IAArB,EAArB;AAEA,WAAO,KAAKhC,QAAL,CAAc+D,SAAd,CAAwBxC,MAAxB,CAAP;AACH;;AAED,QAAMiF,UAAN,CAAiBtF,eAAjB,EAAkC;AAC9B,UAAMW,QAAQ,GAAG,MAAM,KAAK7B,QAAL,CAAc6B,QAAd,GAAyBC,EAAzB,CAA4BZ,eAA5B,CAAvB;AAEA,UAAMK,MAAM,GAAG,MAAMM,QAAQ,CAAC2E,UAAT,GAAsBxE,IAAtB,EAArB;AAEA,WAAO,KAAKhC,QAAL,CAAc+D,SAAd,CAAwBxC,MAAxB,CAAP;AACH;;AAvoBQ;;AA0oBb,eAAe,IAAIzB,MAAJ,EAAf","sourcesContent":["import conf from './conf'\nimport EventEmitter from 'eventemitter3'\n\nclass Wallet {\n\n    constructor() {\n\n        // tronWeb 对象\n        this.tronWrap = window.tronWeb\n\n        // 事件名字常量\n        this.eventConstant = {\n            wallet_connection: \"wallet_connection\", // 钱包连接\n\n            // cornPool_balance_update:   conf['pool']['cornPoolAddress'],\n            // pearlPool_balance_update:  conf['pool']['pearlPoolAddress'],\n            // taiPool_balance_update:    conf['pool']['taiPoolAddress'],\n            // usdtPool_balance_update:   conf['pool']['usdtPoolAddress'],\n            // tigerPool_balance_update:  conf['pool']['tigerPoolAddress'],\n            // tigercPool_balance_update: conf['pool']['tigercPoolAddress'],\n        }\n\n        // 数据，在这里获取，使用事件更新 bigNumber , 比较大小使用 comparedTo\n        // this.store = {\n        //     [conf['pool']['cornPoolAddress']]: {\n        //         pawnNum:      0, // 抵押数量\n        //         totalPawnNum: 0, // 总抵押数量\n        //         rewardNum:    0, // 已获得奖金数\n        //         lpTokenNum:   0 // lp token 余额数量\n        //     },\n        //\n        //     [conf['pool']['pearlPoolAddress']]: {\n        //         pawnNum:      0, // 抵押数量\n        //         totalPawnNum: 0, // 总抵押数量\n        //         rewardNum:    0, // 已获得奖金数\n        //         lpTokenNum:   0 // lp token 余额数量\n        //     },\n        //\n        //     [conf['pool']['taiPoolAddress']]: {\n        //         pawnNum:      0, // 抵押数量\n        //         totalPawnNum: 0, // 总抵押数量\n        //         rewardNum:    0, // 已获得奖金数\n        //         lpTokenNum:   0 // lp token 余额数量\n        //     },\n        //\n        //     [conf['pool']['usdtPoolAddress']]: {\n        //         pawnNum:      0, // 抵押数量\n        //         totalPawnNum: 0, // 总抵押数量\n        //         rewardNum:    0, // 已获得奖金数\n        //         lpTokenNum:   0 // lp token 余额数量\n        //     },\n        //\n        //     [conf['pool']['tigerPoolAddress']]: {\n        //         pawnNum:      0, // 抵押数量\n        //         totalPawnNum: 0, // 总抵押数量\n        //         rewardNum:    0, // 已获得奖金数\n        //         lpTokenNum:   0 // lp token 余额数量\n        //     },\n        //\n        //     [conf['pool']['tigercPoolAddress']]: {\n        //         pawnNum:      0, // 抵押数量\n        //         totalPawnNum: 0, // 总抵押数量\n        //         rewardNum:    0, // 已获得奖金数\n        //         lpTokenNum:   0 // lp token 余额数量\n        //     }\n        //\n        // }\n\n        // 事件管理器\n        this.eventEmitter = new EventEmitter()\n\n        this._init()\n    }\n\n    _init() {\n        const timerRec = setInterval(() => {\n            if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\n                clearInterval(timerRec)\n                this.tronWrap = window.tronWeb\n\n                this.eventEmitter.emit(this.eventConstant.wallet_connection) // 派发钱包连接事件\n\n                // 获得钱包后监听、网络、账户、节点等变化\n                // window.addEventListener('message', function (e) {\n                //   if (e.data.message && e.data.message.action == \"tabReply\") {\n                //     window.location.reload();\n                //   }\n\n                //   if (e.data.message && e.data.message.action == \"setAccount\") {\n                //     window.location.reload();\n                //   }\n\n                //   if (e.data.message && e.data.message.action == \"setNode\") {\n                //     window.location.reload();\n                //   }\n                // });\n            }\n        }, 10)\n    }\n\n    // 获取默认地址\n    getDefaultAddress() {\n\n        if (typeof this.tronWrap === 'undefined') {\n            return {\n                code: -1,\n                msg:  '未连接钱包'\n            }\n        }\n\n        return {\n            code: 0,\n            data: this.tronWrap.defaultAddress.base58\n        }\n    }\n\n    /**\n     * 根据合约地址查询余额\n     * 查询余额 balanceOf(address account) view\n     *\n     * @param {string} contractAddress 合约地址\n     * @param {string} myAccount 查询谁的账户\n     */\n    async _getBalanceOf(contractAddress, myAccount) {\n\n        if (typeof this.tronWrap === 'undefined' || this.getDefaultAddress().code === -1) {\n            return {\n                code: -1,\n                msg:  '未连接钱包'\n            }\n        }\n\n        const args = [\n            {\n                type:  \"address\",\n                value: myAccount\n            }\n        ]\n\n        const result = await this.tronWrap\n            .transactionBuilder\n            .triggerConstantContract(\n                contractAddress,\n                \"balanceOf(address)\",\n                {},\n                args,\n                this.getDefaultAddress().data\n            )\n\n        return {\n            code: 0,\n            data: this.tronWrap.toBigNumber(\"0x\" + result.constant_result[0])\n        }\n    }\n\n    /**\n     * 根据合约地址查询总量\n     * 查询总量 totalSupply() view\n     *\n     * @param {string} contractAddress 合约地址\n     */\n    async _getTotalSupply(contractAddress) {\n\n        if (typeof this.tronWrap === 'undefined') {\n            return {\n                code: -1,\n                msg:  '未连接钱包'\n            }\n        }\n\n        const contract = await this.tronWrap.contract().at(contractAddress)\n        const result   = await contract.totalSupply().call()\n\n        console.log('根据合约地址查询总量>>>', result)\n\n        return {\n            code: 0,\n            data: this.tronWrap.toBigNumber(result._hex)\n        }\n    }\n\n    /**\n     * 根据合约地址查询、我的奖励\n     * 我的奖励 earned(address account) view\n     * @param {string} contractAddress 合约地址\n     * @param {string} myAccount 查询谁的账户\n     */\n    async _getEarned(contractAddress, myAccount) {\n\n        if (typeof this.tronWrap === 'undefined') {\n            return {\n                code: -1,\n                msg:  '未连接钱包'\n            }\n        }\n\n        const contract = await this.tronWrap.contract().at(contractAddress)\n\n        const result = await contract.earned(this.getDefaultAddress().data).call()\n\n        console.log('根据合约地址查询、我的奖励>>>', result)\n\n        return {\n            code: 0,\n            data: this.tronWrap.toBigNumber(result._hex)\n        }\n    }\n\n    /**\n     * 根据合约地址、存款\n     * 存款 stake(uint256 amount)\n     * @param {string} contractAddress 合约地址\n     * @param {number} myNum 查询谁的账户\n     */\n    async stake(contractAddress, myNum) {\n\n        if (typeof this.tronWrap === 'undefined') {\n            return {\n                code: -1,\n                msg:  '未连接钱包'\n            }\n        }\n\n        const contract = await this.tronWrap.contract().at(contractAddress)\n\n        // myNum 处理下精度、单位转换问题\n        const result = await contract.stake(this.tronWrap.toBigNumber(myNum).toString(10)).send({\n            feeLimit:           1e8,\n            callValue:          0,\n            shouldPollResponse: !0\n        })\n\n        console.log('根据合约地址、存款>>>', result)\n\n        return result\n    }\n\n    /**\n     * 根据合约地址、安全的存款。检验是否授权\n     * 存款 safeInvestment(uint256 amount)\n     * @param {string} lpAddress lp 合约地址\n     * @param {string} contractAddress 合约地址\n     * @param {number} myNum 查询谁的账户\n     */\n    async safeInvest(contractAddress, lpAddress, myNum) {\n\n        return await this.stake(contractAddress, myNum)\n\n    }\n\n\n    /**\n     * 根据合约地址、撤出资金池\n     * 存款 withdraw(uint256 amount)\n     * @param {string} contractAddress 合约地址\n     * @param {number} myNum 查询谁的账户\n     */\n    async withdraw(contractAddress, myNum) {\n        if (typeof this.tronWrap === 'undefined') {\n            return {\n                code: -1,\n                msg:  '未连接钱包'\n            }\n        }\n\n        const contract = await this.tronWrap.contract().at(contractAddress)\n\n        // myNum 处理下精度、单位转换问题\n        const result = await contract.withdraw(this.tronWrap.toBigNumber(myNum).toString(10)).send({\n            feeLimit:           1e8,\n            callValue:          0,\n            shouldPollResponse: !0\n        })\n\n        console.log('根据合约地址、撤出资金池>>>', result)\n\n        return result\n    }\n\n    /**\n     * 根据合约地址、领取奖励\n     * 领取奖励 getReward()\n     * @param {string} contractAddress 合约地址\n     */\n    async getReward(contractAddress) {\n\n        if (typeof this.tronWrap === 'undefined') {\n            return {\n                code: -1,\n                msg:  '未连接钱包'\n            }\n        }\n\n        const contract = await this.tronWrap.contract().at(contractAddress)\n\n        const result = await contract.getReward().send({\n            feeLimit:           1e8,\n            callValue:          0,\n            shouldPollResponse: !0\n        })\n\n        console.log('根据合约地址、领取奖励>>>', result)\n\n        return result\n    }\n\n    /**\n     * 根据合约地址、退出\n     * 领取奖励 exit()\n     * @param {string} contractAddress 合约地址\n     */\n    async exit(contractAddress) {\n\n        if (typeof this.tronWrap === 'undefined') {\n            return {\n                code: -1,\n                msg:  '未连接钱包'\n            }\n        }\n\n        const contract = await this.tronWrap.contract().at(contractAddress)\n\n        const result = await contract.exit().send({\n            feeLimit:           1e8,\n            callValue:          0,\n            shouldPollResponse: !0\n        })\n\n        console.log('根据合约地址、退出>>>', result)\n\n        return result\n    }\n\n    /**\n     * 根据合约地址、授权金额\n     * 授权金额 \"approve(address,uint256)\"\n     * @param {string} contractAddress 合约地址\n     * @param {string} spendAccount 花钱的人地址\n     * @param {number} myNum 数量\n     */\n    async approve(contractAddress, spendAccount, myNum) {\n\n        if (typeof this.tronWrap === 'undefined' || this.getDefaultAddress().code === -1) {\n            return {\n                code: -1,\n                msg:  '未连接钱包'\n            }\n        }\n\n        const r = [\n            {\n                type:  \"address\",\n                value: spendAccount\n            }, {\n                type:  \"uint256\",\n                value: \"115792089237316195423570985008687907853269984665640564039457584007913129639934\"\n            }\n        ]\n\n        const result = await this.tronWrap\n            .transactionBuilder\n            .triggerSmartContract(\n                contractAddress,\n                \"approve(address,uint256)\",\n                {},\n                r,\n                this.getDefaultAddress().data\n            )\n\n        const aaa = await this.tronWrap.trx.sign(result.transaction)\n        const bb  = this.tronWrap.trx.sendRawTransaction(aaa)\n        console.log('根据合约地址、授权金额>>>', bb)\n\n        return bb\n    }\n\n    /**\n     * 根据合约地址查询、查询授权金额\n     * 查询授权金额 \"allowance(address,address)\" 我的钱可以谁花\n     * @param {string} contractAddress 合约地址\n     * @param {string} myAccount 我的钱\n     * @param {string} spendAccount 可以花钱的人\n     */\n    async allowance(contractAddress, myAccount, spendAccount) {\n\n        if (typeof this.tronWrap === 'undefined') {\n            return {\n                code: -1,\n                msg:  '未连接钱包'\n            }\n        }\n\n        const arg = [\n            {\n                type:  \"address\",\n                value: this.getDefaultAddress().data\n            }, {\n                type:  \"address\",\n                value: spendAccount\n            }\n        ]\n\n        const result = await this.tronWrap\n            .transactionBuilder\n            .triggerConstantContract(\n                contractAddress,\n                \"allowance(address,address)\",\n                {},\n                arg,\n                this.getDefaultAddress().data\n            )\n\n        return {\n            code: 0,\n            data: this.tronWrap.toBigNumber(\"0x\" + result.constant_result[0])\n        }\n\n    }\n\n    /**\n     * 获取单个池子目前 totalSupply\n     * @param {string} contractAddress 合约地址\n     * @returns {Promise<void>}\n     */\n    async poolTotal(contractAddress) {\n        const contract = await this.tronWrap.contract().at(contractAddress)\n\n        const result = await contract.totalSupply().call()\n\n        console.log('根据合约地址、获取 totalSupply>>>', result)\n\n        return this.tronWrap.toDecimal(result)\n    }\n\n    getLP(contractName) {\n        return new Promise((resolve, reject) => {\n            let trigger = this.tronWrap.transactionBuilder.triggerConfirmedConstantContract(contractName, `totalSupply()`, {})\n\n            trigger.then(tx => {\n                if (!tx.result.result) {\n                    reject(\"result is false\")\n                }\n\n                let amount = this.tronWrap.toDecimal(\"0x\" + tx.constant_result[0])\n\n                resolve(amount)\n            }).catch(err => {\n                reject(err)\n            })\n        })\n    }\n\n    // lp 占 erc20 数量\n    getContractToUSDT(erc20Contract, lPContract) {\n        return new Promise((resolve, reject) => {\n            const trigger = this.tronWrap.transactionBuilder.triggerConfirmedConstantContract(erc20Contract, `balanceOf(address)`, {},\n                [\n                    {\n                        type:  `address`,\n                        value: lPContract,\n                    }\n                ], lPContract)\n\n            trigger.then(tx => {\n                if (!tx.result.result) {\n                    throw new Error(`result is false`)\n                }\n\n                let amount = this.tronWrap.toDecimal(\"0x\" + tx.constant_result[0])\n\n                resolve(amount)\n                // console.log(tronWeb.fromSun(amount))\n            }).catch(err => {\n                reject(err)\n            })\n        })\n    }\n\n    getTrxToTokenPrice(lpContract, quantity) {\n        return new Promise((resolve, reject) => {\n            let trigger = this.tronWrap.transactionBuilder.triggerConfirmedConstantContract(lpContract, `getTokenToTrxOutputPrice(uint256)`, {},\n                [\n                    {\n                        type:  `uint256`,\n                        value: quantity,\n                    }\n                ])\n\n            trigger.then(async tx => {\n                let amount = this.tronWrap.toDecimal(\"0x\" + tx.constant_result[0])\n\n                resolve(amount)\n            }).catch(err => {\n                reject(err)\n            })\n\n        })\n    }\n\n    getTokenUSDTPrice(lpContract, quantity) {\n        return new Promise((resolve, reject) => {\n            let trigger = this.tronWrap.transactionBuilder.triggerConfirmedConstantContract(lpContract, `getTrxToTokenInputPrice(uint256)`, {},\n                [\n                    {\n                        type:  `uint256`,\n                        value: quantity,\n                    }\n                ])\n\n            trigger.then(async tx => {\n                let amount = this.tronWrap.toDecimal(\"0x\" + tx.constant_result[0])\n\n                resolve(amount)\n            }).catch(err => {\n                reject(err)\n            })\n\n        })\n    }\n\n    /*\n    * 池子 a 年化\n    * poolContract TQiGSmof81YPCYWzaPT8aTmMEt82dGymAt\n    * lpContract TWhR2Be1XLGa4z8xgvPDvfArA1pmCtz6Tq\n    * trc20Contract THRBFeEwKUoREVJCFpLm7JF4ph24bZAVDG\n    *\n    * fieldRate 1天挖矿速率\n    * */\n    async poolYearRate(trc20Contract, poolContract, lpContract, baseTokenContract, fixedRate) {\n        console.log(trc20Contract, poolContract, lpContract, baseTokenContract)\n\n        let myLP   = await this.getLP(poolContract)\n        let fullLP = await this.getLP(lpContract)\n        let ratio  = myLP / fullLP\n\n        console.log(\"myLP: \" + myLP)\n        console.log(\"fullLP: \" + fullLP)\n        console.log(\"占比: \" + ratio)\n\n        console.log(trc20Contract, lpContract)\n\n        let lpTotal = await this.getContractToUSDT(trc20Contract, lpContract)\n        lpTotal     = lpTotal / 1e18\n\n        console.log(\"LP 占 trc20 数量: \" + lpTotal)\n\n        let tig = await this.getTrxToTokenPrice(baseTokenContract, 1)\n        tig     = 1 / (tig / 1e12)\n\n        let toTrx = await this.getTrxToTokenPrice(lpContract, 1)\n        toTrx     = 1 / (toTrx / 1e12)\n\n        let a = (ratio * (lpTotal * 2) * toTrx)\n\n        console.log(\"1 token: \" + tig + \"trx\")\n        console.log(\"1 token to trx: \" + toTrx + \"trx\")\n        console.log(\"a市值: \" + a)\n\n        fixedRate = fixedRate || 0\n\n        let usdtToTrx = await this.getTokenUSDTPrice(\"TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE\", 1e6)\n        usdtToTrx     = usdtToTrx / 1e6\n        console.log(\"1 trx: \" + usdtToTrx + \"usdt\")\n\n        let a_rate = (fixedRate * tig) / a\n\n        console.log(\"a_rate: \" + a_rate)\n\n        // console.log(\"年化: \" + Math.pow(a_rate + 1, 356) * 100)\n        let yearRate = ((a_rate + 1) * 356) * 100\n\n        console.log(\"年化: \" + yearRate)\n        console.log(\"----------\")\n\n        return new Promise((resolve, reject) => {\n            resolve(Math.floor(yearRate))\n        })\n    }\n\n    async poolUSDTYearRate(trc20Contract, poolContract, lpContract, baseTokenContract, fixedRate) {\n        console.log(trc20Contract, poolContract, lpContract, baseTokenContract)\n\n        let myLP   = await this.getLP(poolContract)\n        let fullLP = await this.getLP(lpContract)\n        let ratio  = myLP / fullLP\n\n        console.log(\"myLP: \" + myLP)\n        console.log(\"fullLP: \" + fullLP)\n        console.log(\"占比: \" + ratio)\n\n        let lpTotal = await this.getContractToUSDT(trc20Contract, lpContract)\n        lpTotal     = lpTotal / 1e6\n\n        console.log(\"LP 占 trc20 数量: \" + lpTotal)\n\n\n        let a = ratio * (lpTotal * 2)\n\n        console.log(\"a市值: \" + a)\n\n        // let fieldRate = 642857\n        fixedRate = fixedRate || 0\n\n        let tig = await this.getTrxToTokenPrice(baseTokenContract, 1)\n        tig     = 1 / (tig / 1e12)\n        console.log(\"1 token: \" + tig + \"trx\")\n\n        let usdtToTrx = await this.getTokenUSDTPrice(\"TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE\", 1e6)\n        usdtToTrx     = usdtToTrx / 1e6\n        console.log(\"1 trx: \" + usdtToTrx + \"usdt\")\n\n        // myLP: 98455000\n        // wallet.js:565 fullLP: 2118588115628446\n        // wallet.js:566 占比: 4.647198729838757e-8\n        // wallet.js:571 LP 占 trc20 数量: 64125433.456946\n        // wallet.js:532 1 token: 0.0169127445614111trx\n        // wallet.js:576 a市值: 5.960072658229584\n        // wallet.js:593 a_rate: 5.056624220777389\n        // wallet.js:598 年化: 215615.82225967504\n\n        let a_rate = (fixedRate * tig * usdtToTrx) / a\n\n        console.log(\"a_rate: \" + a_rate)\n\n        // console.log(\"年化: \" + Math.pow(a_rate + 1, 356) * 100)\n        let yearRate = ((a_rate + 1) * 356) * 100\n\n        console.log(\"年化: \" + yearRate)\n        console.log(\"----------\")\n\n        return new Promise((resolve, reject) => {\n            resolve(Math.floor(yearRate))\n        })\n    }\n\n\n    async readMint(contractAddress) {\n        const contract = await this.tronWrap.contract().at(contractAddress)\n\n        const result = await contract.starttime().call()\n\n        return this.tronWrap.toDecimal(result)\n    }\n\n    async rewardRate(contractAddress) {\n        const contract = await this.tronWrap.contract().at(contractAddress)\n\n        const result = await contract.rewardRate().call()\n\n        return this.tronWrap.toDecimal(result)\n    }\n}\n\nexport default new Wallet()\n"]},"metadata":{},"sourceType":"module"}